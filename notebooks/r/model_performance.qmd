---
title: "PDF to statement CSV"
author: "Raphael Merz"
format: html
editor: visual
---

# Model Performance

## 0 Preparation

### Load packages

```{r}
#| message: false
# install.packages("devtools") 
# devtools::install_github("scienceverse/papercheck")
library(papercheck)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyr)
library(readr)
```

## 1 Configuration

```{r}
training_history_path <- "../../data/model_performance/model_training_history.csv" # path to model_training_history.csv

test_predictions_path <- "../../data/model_performance/test_predictions.csv" # path to test_predictions.csv

classification_report_path <- "../../data/model_performance/classification_report.csv" # path to classification_report.csv

results_path <- "../../data/model_performance" # path to where results (incl. figures) should be stored
```

## 2 Load data

### 2.1 Prepare training history data

```{r}
# Load data
training_history <- read.csv(training_history_path)

# Keep only rows that contain an epoch value
training_history_clean <- training_history %>%
  filter(!is.na(epoch))

# Extract training and validation loss separately
train_loss_df <- training_history_clean %>%
  filter(!is.na(loss)) %>%
  select(epoch, loss) %>%
  distinct()

eval_loss_df <- training_history_clean %>%
  filter(!is.na(eval_loss)) %>%
  select(epoch, eval_loss) %>%
  distinct()

# Merge into one dataframe
loss_df <- full_join(train_loss_df, eval_loss_df, by = "epoch")

# Reshape to long format for plotting
loss_long <- loss_df %>%
  pivot_longer(cols = c(loss, eval_loss),
               names_to = "type", values_to = "loss")

# Load font
font_add("Times New Roman", regular = "C:/Windows/Fonts/times.ttf")
showtext_auto()

# Change factor levels for nicer legend labels
loss_long$type <- factor(loss_long$type,
                         levels = c("loss", "eval_loss"),
                         labels = c("Training Loss", "Validation Loss"))

# Plot
loss_curve <- ggplot(loss_long, aes(x = epoch, y = loss, color = type)) +
  geom_line(size = 1) +
  geom_point(size = 3, shape = 15) +  # Square points
  labs(
    title = "Training and Validation Loss per Epoch",
    x = "Epoch", y = "Loss", color = "Loss Type"
  ) +
  theme_minimal(base_family = "Times New Roman") +  # Font
  theme(
    plot.title = element_text(face = "bold"),
    legend.position = c(0.95, 0.95),
    legend.justification = c("right", "top"),
    legend.background = element_rect(fill = alpha("white", 0.8), color = "black")
  )
loss_curve
```

#### Save plot

```{r}
# Save the plot as a PNG file
ggsave(paste0(results_path, "/loss_curve.png"), plot = loss_curve, dpi = 300)

# Font Size is weird - need to fix
```

### 2.2 Prepare classification report 

```{r}
# Load data
classification_report <- read.csv(classification_report_path)

# code here to reference specific values
```

## 
